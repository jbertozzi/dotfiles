# functions kubeon/kubeoff
kubeon() {
  if [[ -w ~/.config/starship.toml ]]; then
    tomcli-set ~/.config/starship.toml false kubernetes.disabled
    tomcli-set ~/.config/starship.toml del kubernetes.detect_folders
  fi
}

kubeoff() {
  if [[ -w ~/.config/starship.toml ]]; then
    tomcli-set ~/.config/starship.toml true kubernetes.disabled
    tomcli-set ~/.config/starship.toml list kubernetes.detect_folders 'vars'
  fi
}

vaulton() {
  if [[ -w ~/.config/starship.toml ]]; then
    tomcli-set ~/.config/starship.toml false env_var.VAULT_ADDR.disabled
  fi
}

vaultoff() {
  if [[ -w ~/.config/starship.toml ]]; then
    tomcli-set ~/.config/starship.toml true env_var.VAULT_ADDR.disabled
  fi
}

# fonction e() -> export environment variables defined in a gpg encrytped file
function e() {
  if [[ -f ~/.secrets.json.gpg ]]; then
    json=$(gpg --quiet --decrypt ~/.secrets.json.gpg 2> /dev/null)
    #json=$(cat ~/.secrets.json 2> /dev/null)
    if [[ $# == 0 ]]; then
      env=$(jq -r '. | to_entries[] | .key' <<< "$json" | fzf)
      [[ -z "$env" ]] && return 1  # Exit if no env selected
      choice=$(jq -r --arg env "$env" '. | to_entries[] | select(.key==$env) | .value | to_entries[] | .key' <<< "$json" | fzf)
      [[ -z "$choice" ]] && return 1  # Exit if no choice selected

      raw=$(jq -r --arg env "$env" --arg choice "$choice" '.[$env][$choice] | to_entries[] | @sh "\(.key)=\(.value)"' <<< "$json")
    else 
      keys=".$(printf "%s+" "$@")"
      keys="${keys//\//.}"
      keys="${keys%+}"
      raw=$(jq -r "$keys | to_entries | map(@sh \"\(.key)=\(.value)\") | sort | join(\"\\n\")" <<< "$json")
    fi

    typeset -A vars
    while IFS='=' read -r key value; do
      key="${key//\'/}"   # remove quotes from key
      value="${value//\'/}" # remove quotes from value
      vars[$key]="$value"
    done <<< "$raw"

    # for each key, we export the variable, unless the key is 'cmd' in which 
    # case we execute a command (useful for ssh port forwarding for example)
    local executed=""
    keys=("${(@o)${(k)vars}}") # sort the keys
    for key in "${keys[@]}"
    do
      if [[ "$key" == "cmd" ]]; then
        eval "${vars[$key]}"
        executed="${vars[$key]}"
      else
        export "$key=${vars[$key]}"
      fi
      printf "environment set: %s" "${key}" >&2
      if [[ -n "$executed" ]]; then
        printf " (cmd: %s)" "${executed}" >&2
      fi
      printf "\n" >&2
      executed=""
    done
  else
    printf "'~/.secrets.json.gpg' not found\n"
  fi
}

# Widget personnalisé pour navigation complétion
function down-or-complete() {
  if [[ $WIDGET == *menu* ]]; then
    zle .down-line-or-history
  else
    zle expand-or-complete
  fi
}
zle -N down-or-complete

function up-or-complete() {
  if [[ $WIDGET == *menu* ]]; then
    zle .up-line-or-history
  else
    zle expand-or-complete
  fi
}
zle -N up-or-complete
